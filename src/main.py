import os
import pytz
import datetime
from dotenv import load_dotenv 

# Importa agentes
from src.agents import (
    agente_investigador,
    agente_buscador,
    agente_de_compra,
    agente_seletor,
    agente_revisor_culinario
)
# Importa as fun√ß√µes auxiliares
from src.utils import call_agent, to_markdown 

# --- Configura√ß√£o da API Key ---
load_dotenv() # Carrega as vari√°veis do arquivo .env

os.environ["GOOGLE_API_KEY"] = os.getenv('GOOGLE_API_KEY')

if os.environ["GOOGLE_API_KEY"] is None:
    print("Erro: A vari√°vel de ambiente GOOGLE_API_KEY n√£o est√° configurada.")
    print("Certifique-se de ter um arquivo .env com GOOGLE_API_KEY=SUA_CHAVE ou que a vari√°vel esteja definida no sistema.")
    exit() # Sai do programa se a chave n√£o for encontrada


# --- Fluxo Principal de Execu√ß√£o ---

# 1. Obten√ß√£o da Data e Hora Atual no Fuso Hor√°rio do Brasil
fuso_horario_brasil = pytz.timezone('America/Sao_Paulo')
# Obt√©m o hor√°rio UTC e depois converter para o fuso local
data_e_hora_atual_tz = datetime.datetime.now(pytz.utc).astimezone(fuso_horario_brasil)
# Formata a data e hora para passar para os agentes, incluindo nome e offset do fuso
data_e_hora_formatada_para_agente = data_e_hora_atual_tz.strftime("%A, %d de %B de %Y, %H:%M:%S %Z%z")

# 2. Iniciar a Intera√ß√£o com o Agente Investigador
agente_de_coleta = agente_investigador()
print(to_markdown(f"**E a√≠, mestre-cuca! üßë‚Äçüç≥ Chega de sofrer pra decidir o rango, n√©?**\n\nEu sou o **ChefIA**, seu novo parceiro culin√°rio inteligente, e t√¥ aqui pra virar essa chave na sua cozinha! Bora transformar **o que voc√™ tem por a√≠** em pratos incr√≠veis, sem estresse e com muito sabor?\n\nPra come√ßar, qual a boa de hoje na sua despensa, geladeira, horta...?"))

informacoes_coletadas = "" # Vari√°vel para armazenar a resposta final do agente_investigador
historico_conversacao = []

while True:
    user_input = input("Voc√™: ")
    historico_conversacao.append(f"Usu√°rio: {user_input}")

    contexto_para_agente = "\n".join(historico_conversacao)
    agent_response = call_agent(agente_de_coleta, contexto_para_agente)
    historico_conversacao.append(f"Agente: {agent_response}")

    if agent_response.strip().startswith("FIM"):
        output_agente1 = agent_response.replace("FIM\n", "", 1).strip()
        print("\nInforma√ß√µes coletadas com sucesso!\n")
        print(to_markdown(output_agente1))
        break
    else:
        print(to_markdown(f"Agente: {agent_response}"))

print(to_markdown("\n**Trabalhando na sua solicita√ß√£o. Aguarde, isso pode levar alguns instantes...**"))
# 3. Chamar o Agente Buscador de Receitas
#print("\n--- Pr√≥xima Etapa: Buscando Receitas ---")
receitas_sugeridas = agente_buscador(output_agente1)
#print(receitas_sugeridas)

# 4. Chamar o Agente Criador de Roteiros de Compra
#print("\n--- Pr√≥xima Etapa: Criando Roteiros de Compra ---")
roteiros_de_compra_finais = agente_de_compra(output_agente1, receitas_sugeridas)
#print(roteiros_de_compra_finais)

# 5. Chamar o Agente Seletor de Receita e Gerar Roteiro Final
#print("\n--- Pr√≥xima Etapa: Selecionando a Receita e Criando o Roteiro Final ---")

receita_e_roteiro_final = agente_seletor(
    informacoes_basicas_usuario=output_agente1,
    data_e_hora_atual=data_e_hora_formatada_para_agente,
    roteiros_de_compra_e_receitas=roteiros_de_compra_finais
)
# print(receita_e_roteiro_final) # Voc√™ pode comentar esta linha se quiser apenas a sa√≠da final do revisor

# 6. Chamar o Agente Revisor Culin√°rio para Formata√ß√£o Final
#print("\n--- Pr√≥xima Etapa: Preparando a Apresenta√ß√£o Final para Voc√™! ---")
output_final_para_usuario = agente_revisor_culinario(receita_e_roteiro_final)
print(to_markdown(output_final_para_usuario))